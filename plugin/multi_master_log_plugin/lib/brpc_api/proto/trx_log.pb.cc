// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trx_log.proto

#include "trx_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trx_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrxLogMsg_trx_5flog_2eproto;
namespace MMLP_BRPC {
class TrxLogMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrxLogMsg> _instance;
} _TrxLogMsg_default_instance_;
class LogSendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogSendRequest> _instance;
} _LogSendRequest_default_instance_;
class LogSendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogSendResponse> _instance;
} _LogSendResponse_default_instance_;
class LogRequireRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogRequireRequest> _instance;
} _LogRequireRequest_default_instance_;
class LogRequireResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogRequireResponse> _instance;
} _LogRequireResponse_default_instance_;
}  // namespace MMLP_BRPC
static void InitDefaultsscc_info_LogRequireRequest_trx_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogRequireRequest_default_instance_;
    new (ptr) ::MMLP_BRPC::LogRequireRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogRequireRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogRequireRequest_trx_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogRequireRequest_trx_5flog_2eproto}, {}};

static void InitDefaultsscc_info_LogRequireResponse_trx_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogRequireResponse_default_instance_;
    new (ptr) ::MMLP_BRPC::LogRequireResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogRequireResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogRequireResponse_trx_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogRequireResponse_trx_5flog_2eproto}, {
      &scc_info_TrxLogMsg_trx_5flog_2eproto.base,}};

static void InitDefaultsscc_info_LogSendRequest_trx_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogSendRequest_default_instance_;
    new (ptr) ::MMLP_BRPC::LogSendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogSendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogSendRequest_trx_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogSendRequest_trx_5flog_2eproto}, {
      &scc_info_TrxLogMsg_trx_5flog_2eproto.base,}};

static void InitDefaultsscc_info_LogSendResponse_trx_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_LogSendResponse_default_instance_;
    new (ptr) ::MMLP_BRPC::LogSendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::LogSendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogSendResponse_trx_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogSendResponse_trx_5flog_2eproto}, {}};

static void InitDefaultsscc_info_TrxLogMsg_trx_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MMLP_BRPC::_TrxLogMsg_default_instance_;
    new (ptr) ::MMLP_BRPC::TrxLogMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MMLP_BRPC::TrxLogMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrxLogMsg_trx_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrxLogMsg_trx_5flog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trx_5flog_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_trx_5flog_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_trx_5flog_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trx_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, type_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, space_id_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, page_no_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, offset_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::TrxLogMsg, rec_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, trxid_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, is_valid_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendRequest, log_msg_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogSendResponse, send_reply_),
  0,
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireRequest, trxid_),
  0,
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, require_reply_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, is_valid_),
  PROTOBUF_FIELD_OFFSET(::MMLP_BRPC::LogRequireResponse, log_msg_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::MMLP_BRPC::TrxLogMsg)},
  { 15, 23, sizeof(::MMLP_BRPC::LogSendRequest)},
  { 26, 32, sizeof(::MMLP_BRPC::LogSendResponse)},
  { 33, 39, sizeof(::MMLP_BRPC::LogRequireRequest)},
  { 40, 48, sizeof(::MMLP_BRPC::LogRequireResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMLP_BRPC::_TrxLogMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMLP_BRPC::_LogSendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMLP_BRPC::_LogSendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMLP_BRPC::_LogRequireRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MMLP_BRPC::_LogRequireResponse_default_instance_),
};

const char descriptor_table_protodef_trx_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtrx_log.proto\022\tMMLP_BRPC\"Y\n\tTrxLogMsg\022"
  "\014\n\004type\030\001 \002(\021\022\020\n\010space_id\030\002 \002(\r\022\017\n\007page_"
  "no\030\003 \002(\r\022\016\n\006offset\030\004 \002(\r\022\013\n\003rec\030\005 \002(\014\"X\n"
  "\016LogSendRequest\022\r\n\005trxID\030\001 \002(\004\022\020\n\010is_val"
  "id\030\002 \002(\010\022%\n\007log_msg\030\003 \003(\0132\024.MMLP_BRPC.Tr"
  "xLogMsg\"%\n\017LogSendResponse\022\022\n\nsend_reply"
  "\030\001 \002(\021\"\"\n\021LogRequireRequest\022\r\n\005trxID\030\001 \002"
  "(\004\"d\n\022LogRequireResponse\022\025\n\rrequire_repl"
  "y\030\001 \002(\021\022\020\n\010is_valid\030\002 \002(\010\022%\n\007log_msg\030\003 \003"
  "(\0132\024.MMLP_BRPC.TrxLogMsg2\234\001\n\rTrxLogServi"
  "ce\022@\n\007sendLog\022\031.MMLP_BRPC.LogSendRequest"
  "\032\032.MMLP_BRPC.LogSendResponse\022I\n\nrequireL"
  "og\022\034.MMLP_BRPC.LogRequireRequest\032\035.MMLP_"
  "BRPC.LogRequireResponseB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trx_5flog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trx_5flog_2eproto_sccs[5] = {
  &scc_info_LogRequireRequest_trx_5flog_2eproto.base,
  &scc_info_LogRequireResponse_trx_5flog_2eproto.base,
  &scc_info_LogSendRequest_trx_5flog_2eproto.base,
  &scc_info_LogSendResponse_trx_5flog_2eproto.base,
  &scc_info_TrxLogMsg_trx_5flog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trx_5flog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trx_5flog_2eproto = {
  false, false, descriptor_table_protodef_trx_5flog_2eproto, "trx_log.proto", 548,
  &descriptor_table_trx_5flog_2eproto_once, descriptor_table_trx_5flog_2eproto_sccs, descriptor_table_trx_5flog_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_trx_5flog_2eproto::offsets,
  file_level_metadata_trx_5flog_2eproto, 5, file_level_enum_descriptors_trx_5flog_2eproto, file_level_service_descriptors_trx_5flog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trx_5flog_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trx_5flog_2eproto)), true);
namespace MMLP_BRPC {

// ===================================================================

void TrxLogMsg::InitAsDefaultInstance() {
}
class TrxLogMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<TrxLogMsg>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_space_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page_no(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

TrxLogMsg::TrxLogMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMLP_BRPC.TrxLogMsg)
}
TrxLogMsg::TrxLogMsg(const TrxLogMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rec()) {
    rec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rec(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.TrxLogMsg)
}

void TrxLogMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrxLogMsg_trx_5flog_2eproto.base);
  rec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
}

TrxLogMsg::~TrxLogMsg() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.TrxLogMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrxLogMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrxLogMsg::ArenaDtor(void* object) {
  TrxLogMsg* _this = reinterpret_cast< TrxLogMsg* >(object);
  (void)_this;
}
void TrxLogMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrxLogMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrxLogMsg& TrxLogMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrxLogMsg_trx_5flog_2eproto.base);
  return *internal_default_instance();
}


void TrxLogMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.TrxLogMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rec_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrxLogMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 space_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_space_id(&has_bits);
          space_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 page_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_page_no(&has_bits);
          page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes rec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrxLogMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.TrxLogMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 space_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_space_id(), target);
  }

  // required uint32 page_no = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page_no(), target);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  // required bytes rec = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_rec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.TrxLogMsg)
  return target;
}

size_t TrxLogMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.TrxLogMsg)
  size_t total_size = 0;

  if (_internal_has_rec()) {
    // required bytes rec = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rec());
  }

  if (_internal_has_type()) {
    // required sint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());
  }

  if (_internal_has_space_id()) {
    // required uint32 space_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_space_id());
  }

  if (_internal_has_page_no()) {
    // required uint32 page_no = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_no());
  }

  if (_internal_has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  return total_size;
}
size_t TrxLogMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.TrxLogMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes rec = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rec());

    // required sint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());

    // required uint32 space_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_space_id());

    // required uint32 page_no = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_no());

    // required uint32 offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrxLogMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.TrxLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TrxLogMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrxLogMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.TrxLogMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.TrxLogMsg)
    MergeFrom(*source);
  }
}

void TrxLogMsg::MergeFrom(const TrxLogMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.TrxLogMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rec(from._internal_rec());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      space_id_ = from.space_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      page_no_ = from.page_no_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrxLogMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.TrxLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrxLogMsg::CopyFrom(const TrxLogMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.TrxLogMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrxLogMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrxLogMsg::InternalSwap(TrxLogMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rec_.Swap(&other->rec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrxLogMsg, offset_)
      + sizeof(TrxLogMsg::offset_)
      - PROTOBUF_FIELD_OFFSET(TrxLogMsg, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrxLogMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogSendRequest::InitAsDefaultInstance() {
}
class LogSendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LogSendRequest>()._has_bits_);
  static void set_has_trxid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LogSendRequest::LogSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  log_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMLP_BRPC.LogSendRequest)
}
LogSendRequest::LogSendRequest(const LogSendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      log_msg_(from.log_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trxid_, &from.trxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&trxid_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogSendRequest)
}

void LogSendRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogSendRequest_trx_5flog_2eproto.base);
  ::memset(&trxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&trxid_)) + sizeof(is_valid_));
}

LogSendRequest::~LogSendRequest() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogSendRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogSendRequest::ArenaDtor(void* object) {
  LogSendRequest* _this = reinterpret_cast< LogSendRequest* >(object);
  (void)_this;
}
void LogSendRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogSendRequest& LogSendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogSendRequest_trx_5flog_2eproto.base);
  return *internal_default_instance();
}


void LogSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogSendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&trxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_valid_) -
        reinterpret_cast<char*>(&trxid_)) + sizeof(is_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 trxID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trxid(&has_bits);
          trxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_valid(&has_bits);
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogSendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trxID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trxid(), target);
  }

  // required bool is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_log_msg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogSendRequest)
  return target;
}

size_t LogSendRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.LogSendRequest)
  size_t total_size = 0;

  if (_internal_has_trxid()) {
    // required uint64 trxID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trxid());
  }

  if (_internal_has_is_valid()) {
    // required bool is_valid = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LogSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogSendRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 trxID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trxid());

    // required bool is_valid = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  total_size += 1UL * this->_internal_log_msg_size();
  for (const auto& msg : this->log_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogSendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogSendRequest)
    MergeFrom(*source);
  }
}

void LogSendRequest::MergeFrom(const LogSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_msg_.MergeFrom(from.log_msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trxid_ = from.trxid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_valid_ = from.is_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogSendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSendRequest::CopyFrom(const LogSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSendRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(log_msg_)) return false;
  return true;
}

void LogSendRequest::InternalSwap(LogSendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  log_msg_.InternalSwap(&other->log_msg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogSendRequest, is_valid_)
      + sizeof(LogSendRequest::is_valid_)
      - PROTOBUF_FIELD_OFFSET(LogSendRequest, trxid_)>(
          reinterpret_cast<char*>(&trxid_),
          reinterpret_cast<char*>(&other->trxid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogSendResponse::InitAsDefaultInstance() {
}
class LogSendResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LogSendResponse>()._has_bits_);
  static void set_has_send_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LogSendResponse::LogSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMLP_BRPC.LogSendResponse)
}
LogSendResponse::LogSendResponse(const LogSendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  send_reply_ = from.send_reply_;
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogSendResponse)
}

void LogSendResponse::SharedCtor() {
  send_reply_ = 0;
}

LogSendResponse::~LogSendResponse() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogSendResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogSendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogSendResponse::ArenaDtor(void* object) {
  LogSendResponse* _this = reinterpret_cast< LogSendResponse* >(object);
  (void)_this;
}
void LogSendResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogSendResponse& LogSendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogSendResponse_trx_5flog_2eproto.base);
  return *internal_default_instance();
}


void LogSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogSendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_reply_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogSendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sint32 send_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_send_reply(&has_bits);
          send_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogSendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 send_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_send_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogSendResponse)
  return target;
}

size_t LogSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogSendResponse)
  size_t total_size = 0;

  // required sint32 send_reply = 1;
  if (_internal_has_send_reply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_send_reply());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogSendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogSendResponse)
    MergeFrom(*source);
  }
}

void LogSendResponse::MergeFrom(const LogSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_send_reply()) {
    _internal_set_send_reply(from._internal_send_reply());
  }
}

void LogSendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSendResponse::CopyFrom(const LogSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSendResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LogSendResponse::InternalSwap(LogSendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(send_reply_, other->send_reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogRequireRequest::InitAsDefaultInstance() {
}
class LogRequireRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRequireRequest>()._has_bits_);
  static void set_has_trxid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LogRequireRequest::LogRequireRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMLP_BRPC.LogRequireRequest)
}
LogRequireRequest::LogRequireRequest(const LogRequireRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trxid_ = from.trxid_;
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogRequireRequest)
}

void LogRequireRequest::SharedCtor() {
  trxid_ = PROTOBUF_ULONGLONG(0);
}

LogRequireRequest::~LogRequireRequest() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogRequireRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogRequireRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogRequireRequest::ArenaDtor(void* object) {
  LogRequireRequest* _this = reinterpret_cast< LogRequireRequest* >(object);
  (void)_this;
}
void LogRequireRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRequireRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogRequireRequest& LogRequireRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogRequireRequest_trx_5flog_2eproto.base);
  return *internal_default_instance();
}


void LogRequireRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogRequireRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRequireRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 trxID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trxid(&has_bits);
          trxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRequireRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogRequireRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 trxID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogRequireRequest)
  return target;
}

size_t LogRequireRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogRequireRequest)
  size_t total_size = 0;

  // required uint64 trxID = 1;
  if (_internal_has_trxid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trxid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRequireRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogRequireRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRequireRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogRequireRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogRequireRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogRequireRequest)
    MergeFrom(*source);
  }
}

void LogRequireRequest::MergeFrom(const LogRequireRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogRequireRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trxid()) {
    _internal_set_trxid(from._internal_trxid());
  }
}

void LogRequireRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogRequireRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequireRequest::CopyFrom(const LogRequireRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogRequireRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequireRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LogRequireRequest::InternalSwap(LogRequireRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trxid_, other->trxid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRequireRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogRequireResponse::InitAsDefaultInstance() {
}
class LogRequireResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRequireResponse>()._has_bits_);
  static void set_has_require_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

LogRequireResponse::LogRequireResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  log_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MMLP_BRPC.LogRequireResponse)
}
LogRequireResponse::LogRequireResponse(const LogRequireResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      log_msg_(from.log_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&require_reply_, &from.require_reply_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&require_reply_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:MMLP_BRPC.LogRequireResponse)
}

void LogRequireResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogRequireResponse_trx_5flog_2eproto.base);
  ::memset(&require_reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&require_reply_)) + sizeof(is_valid_));
}

LogRequireResponse::~LogRequireResponse() {
  // @@protoc_insertion_point(destructor:MMLP_BRPC.LogRequireResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogRequireResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogRequireResponse::ArenaDtor(void* object) {
  LogRequireResponse* _this = reinterpret_cast< LogRequireResponse* >(object);
  (void)_this;
}
void LogRequireResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRequireResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogRequireResponse& LogRequireResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogRequireResponse_trx_5flog_2eproto.base);
  return *internal_default_instance();
}


void LogRequireResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MMLP_BRPC.LogRequireResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&require_reply_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_valid_) -
        reinterpret_cast<char*>(&require_reply_)) + sizeof(is_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRequireResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sint32 require_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_require_reply(&has_bits);
          require_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_valid(&has_bits);
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRequireResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MMLP_BRPC.LogRequireResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 require_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_require_reply(), target);
  }

  // required bool is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid(), target);
  }

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_log_msg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MMLP_BRPC.LogRequireResponse)
  return target;
}

size_t LogRequireResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MMLP_BRPC.LogRequireResponse)
  size_t total_size = 0;

  if (_internal_has_require_reply()) {
    // required sint32 require_reply = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_require_reply());
  }

  if (_internal_has_is_valid()) {
    // required bool is_valid = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LogRequireResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MMLP_BRPC.LogRequireResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sint32 require_reply = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_require_reply());

    // required bool is_valid = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  total_size += 1UL * this->_internal_log_msg_size();
  for (const auto& msg : this->log_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRequireResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MMLP_BRPC.LogRequireResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRequireResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogRequireResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MMLP_BRPC.LogRequireResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MMLP_BRPC.LogRequireResponse)
    MergeFrom(*source);
  }
}

void LogRequireResponse::MergeFrom(const LogRequireResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MMLP_BRPC.LogRequireResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_msg_.MergeFrom(from.log_msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      require_reply_ = from.require_reply_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_valid_ = from.is_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogRequireResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MMLP_BRPC.LogRequireResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequireResponse::CopyFrom(const LogRequireResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MMLP_BRPC.LogRequireResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequireResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(log_msg_)) return false;
  return true;
}

void LogRequireResponse::InternalSwap(LogRequireResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  log_msg_.InternalSwap(&other->log_msg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRequireResponse, is_valid_)
      + sizeof(LogRequireResponse::is_valid_)
      - PROTOBUF_FIELD_OFFSET(LogRequireResponse, require_reply_)>(
          reinterpret_cast<char*>(&require_reply_),
          reinterpret_cast<char*>(&other->require_reply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRequireResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TrxLogService::~TrxLogService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TrxLogService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trx_5flog_2eproto);
  return file_level_service_descriptors_trx_5flog_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TrxLogService::GetDescriptor() {
  return descriptor();
}

void TrxLogService::sendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::MMLP_BRPC::LogSendRequest*,
                         ::MMLP_BRPC::LogSendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sendLog() not implemented.");
  done->Run();
}

void TrxLogService::requireLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::MMLP_BRPC::LogRequireRequest*,
                         ::MMLP_BRPC::LogRequireResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method requireLog() not implemented.");
  done->Run();
}

void TrxLogService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_trx_5flog_2eproto[0]);
  switch(method->index()) {
    case 0:
      sendLog(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::MMLP_BRPC::LogSendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::MMLP_BRPC::LogSendResponse*>(
                 response),
             done);
      break;
    case 1:
      requireLog(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::MMLP_BRPC::LogRequireRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::MMLP_BRPC::LogRequireResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TrxLogService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MMLP_BRPC::LogSendRequest::default_instance();
    case 1:
      return ::MMLP_BRPC::LogRequireRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TrxLogService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MMLP_BRPC::LogSendResponse::default_instance();
    case 1:
      return ::MMLP_BRPC::LogRequireResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TrxLogService_Stub::TrxLogService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TrxLogService_Stub::TrxLogService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TrxLogService_Stub::~TrxLogService_Stub() {
  if (owns_channel_) delete channel_;
}

void TrxLogService_Stub::sendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::MMLP_BRPC::LogSendRequest* request,
                              ::MMLP_BRPC::LogSendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TrxLogService_Stub::requireLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::MMLP_BRPC::LogRequireRequest* request,
                              ::MMLP_BRPC::LogRequireResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MMLP_BRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MMLP_BRPC::TrxLogMsg* Arena::CreateMaybeMessage< ::MMLP_BRPC::TrxLogMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMLP_BRPC::TrxLogMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::MMLP_BRPC::LogSendRequest* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogSendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMLP_BRPC::LogSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MMLP_BRPC::LogSendResponse* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogSendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMLP_BRPC::LogSendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MMLP_BRPC::LogRequireRequest* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogRequireRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMLP_BRPC::LogRequireRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MMLP_BRPC::LogRequireResponse* Arena::CreateMaybeMessage< ::MMLP_BRPC::LogRequireResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MMLP_BRPC::LogRequireResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
