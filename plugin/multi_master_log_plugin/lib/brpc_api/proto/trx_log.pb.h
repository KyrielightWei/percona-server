// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trx_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trx_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trx_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trx_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trx_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trx_5flog_2eproto;
namespace MMLP_BRPC {
class BenchLogMsg;
class BenchLogMsgDefaultTypeInternal;
extern BenchLogMsgDefaultTypeInternal _BenchLogMsg_default_instance_;
class LogRequireRequest;
class LogRequireRequestDefaultTypeInternal;
extern LogRequireRequestDefaultTypeInternal _LogRequireRequest_default_instance_;
class LogRequireResponse;
class LogRequireResponseDefaultTypeInternal;
extern LogRequireResponseDefaultTypeInternal _LogRequireResponse_default_instance_;
class LogSendRequest;
class LogSendRequestDefaultTypeInternal;
extern LogSendRequestDefaultTypeInternal _LogSendRequest_default_instance_;
class LogSendResponse;
class LogSendResponseDefaultTypeInternal;
extern LogSendResponseDefaultTypeInternal _LogSendResponse_default_instance_;
class TrxLogMsg;
class TrxLogMsgDefaultTypeInternal;
extern TrxLogMsgDefaultTypeInternal _TrxLogMsg_default_instance_;
}  // namespace MMLP_BRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::MMLP_BRPC::BenchLogMsg* Arena::CreateMaybeMessage<::MMLP_BRPC::BenchLogMsg>(Arena*);
template<> ::MMLP_BRPC::LogRequireRequest* Arena::CreateMaybeMessage<::MMLP_BRPC::LogRequireRequest>(Arena*);
template<> ::MMLP_BRPC::LogRequireResponse* Arena::CreateMaybeMessage<::MMLP_BRPC::LogRequireResponse>(Arena*);
template<> ::MMLP_BRPC::LogSendRequest* Arena::CreateMaybeMessage<::MMLP_BRPC::LogSendRequest>(Arena*);
template<> ::MMLP_BRPC::LogSendResponse* Arena::CreateMaybeMessage<::MMLP_BRPC::LogSendResponse>(Arena*);
template<> ::MMLP_BRPC::TrxLogMsg* Arena::CreateMaybeMessage<::MMLP_BRPC::TrxLogMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MMLP_BRPC {

// ===================================================================

class BenchLogMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.BenchLogMsg) */ {
 public:
  inline BenchLogMsg() : BenchLogMsg(nullptr) {}
  virtual ~BenchLogMsg();

  BenchLogMsg(const BenchLogMsg& from);
  BenchLogMsg(BenchLogMsg&& from) noexcept
    : BenchLogMsg() {
    *this = ::std::move(from);
  }

  inline BenchLogMsg& operator=(const BenchLogMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchLogMsg& operator=(BenchLogMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BenchLogMsg& default_instance();

  static inline const BenchLogMsg* internal_default_instance() {
    return reinterpret_cast<const BenchLogMsg*>(
               &_BenchLogMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BenchLogMsg& a, BenchLogMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchLogMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchLogMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BenchLogMsg* New() const final {
    return CreateMaybeMessage<BenchLogMsg>(nullptr);
  }

  BenchLogMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BenchLogMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BenchLogMsg& from);
  void MergeFrom(const BenchLogMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchLogMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMLP_BRPC.BenchLogMsg";
  }
  protected:
  explicit BenchLogMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trx_5flog_2eproto);
    return ::descriptor_table_trx_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageNoFieldNumber = 1,
    kRowNoFieldNumber = 2,
  };
  // required uint32 page_no = 1;
  bool has_page_no() const;
  private:
  bool _internal_has_page_no() const;
  public:
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 row_no = 2;
  bool has_row_no() const;
  private:
  bool _internal_has_row_no() const;
  public:
  void clear_row_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_no() const;
  void set_row_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_no() const;
  void _internal_set_row_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.BenchLogMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_no_;
  friend struct ::TableStruct_trx_5flog_2eproto;
};
// -------------------------------------------------------------------

class TrxLogMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.TrxLogMsg) */ {
 public:
  inline TrxLogMsg() : TrxLogMsg(nullptr) {}
  virtual ~TrxLogMsg();

  TrxLogMsg(const TrxLogMsg& from);
  TrxLogMsg(TrxLogMsg&& from) noexcept
    : TrxLogMsg() {
    *this = ::std::move(from);
  }

  inline TrxLogMsg& operator=(const TrxLogMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrxLogMsg& operator=(TrxLogMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrxLogMsg& default_instance();

  static inline const TrxLogMsg* internal_default_instance() {
    return reinterpret_cast<const TrxLogMsg*>(
               &_TrxLogMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrxLogMsg& a, TrxLogMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TrxLogMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrxLogMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrxLogMsg* New() const final {
    return CreateMaybeMessage<TrxLogMsg>(nullptr);
  }

  TrxLogMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrxLogMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrxLogMsg& from);
  void MergeFrom(const TrxLogMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrxLogMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMLP_BRPC.TrxLogMsg";
  }
  protected:
  explicit TrxLogMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trx_5flog_2eproto);
    return ::descriptor_table_trx_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBenchmsgFieldNumber = 6,
    kRecFieldNumber = 5,
    kTypeFieldNumber = 1,
    kSpaceIdFieldNumber = 2,
    kPageNoFieldNumber = 3,
    kOffsetFieldNumber = 4,
  };
  // repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
  int benchmsg_size() const;
  private:
  int _internal_benchmsg_size() const;
  public:
  void clear_benchmsg();
  ::MMLP_BRPC::BenchLogMsg* mutable_benchmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >*
      mutable_benchmsg();
  private:
  const ::MMLP_BRPC::BenchLogMsg& _internal_benchmsg(int index) const;
  ::MMLP_BRPC::BenchLogMsg* _internal_add_benchmsg();
  public:
  const ::MMLP_BRPC::BenchLogMsg& benchmsg(int index) const;
  ::MMLP_BRPC::BenchLogMsg* add_benchmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >&
      benchmsg() const;

  // required bytes rec = 5;
  bool has_rec() const;
  private:
  bool _internal_has_rec() const;
  public:
  void clear_rec();
  const std::string& rec() const;
  void set_rec(const std::string& value);
  void set_rec(std::string&& value);
  void set_rec(const char* value);
  void set_rec(const void* value, size_t size);
  std::string* mutable_rec();
  std::string* release_rec();
  void set_allocated_rec(std::string* rec);
  private:
  const std::string& _internal_rec() const;
  void _internal_set_rec(const std::string& value);
  std::string* _internal_mutable_rec();
  public:

  // required sint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 space_id = 2;
  bool has_space_id() const;
  private:
  bool _internal_has_space_id() const;
  public:
  void clear_space_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 space_id() const;
  void set_space_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_space_id() const;
  void _internal_set_space_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 page_no = 3;
  bool has_page_no() const;
  private:
  bool _internal_has_page_no() const;
  public:
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.TrxLogMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg > benchmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rec_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 space_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  friend struct ::TableStruct_trx_5flog_2eproto;
};
// -------------------------------------------------------------------

class LogSendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogSendRequest) */ {
 public:
  inline LogSendRequest() : LogSendRequest(nullptr) {}
  virtual ~LogSendRequest();

  LogSendRequest(const LogSendRequest& from);
  LogSendRequest(LogSendRequest&& from) noexcept
    : LogSendRequest() {
    *this = ::std::move(from);
  }

  inline LogSendRequest& operator=(const LogSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogSendRequest& operator=(LogSendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogSendRequest& default_instance();

  static inline const LogSendRequest* internal_default_instance() {
    return reinterpret_cast<const LogSendRequest*>(
               &_LogSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogSendRequest& a, LogSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogSendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogSendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogSendRequest* New() const final {
    return CreateMaybeMessage<LogSendRequest>(nullptr);
  }

  LogSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogSendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogSendRequest& from);
  void MergeFrom(const LogSendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMLP_BRPC.LogSendRequest";
  }
  protected:
  explicit LogSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trx_5flog_2eproto);
    return ::descriptor_table_trx_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogMsgFieldNumber = 3,
    kTrxIDFieldNumber = 1,
    kIsValidFieldNumber = 2,
  };
  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  int log_msg_size() const;
  private:
  int _internal_log_msg_size() const;
  public:
  void clear_log_msg();
  ::MMLP_BRPC::TrxLogMsg* mutable_log_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
      mutable_log_msg();
  private:
  const ::MMLP_BRPC::TrxLogMsg& _internal_log_msg(int index) const;
  ::MMLP_BRPC::TrxLogMsg* _internal_add_log_msg();
  public:
  const ::MMLP_BRPC::TrxLogMsg& log_msg(int index) const;
  ::MMLP_BRPC::TrxLogMsg* add_log_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
      log_msg() const;

  // required uint64 trxID = 1;
  bool has_trxid() const;
  private:
  bool _internal_has_trxid() const;
  public:
  void clear_trxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 trxid() const;
  void set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trxid() const;
  void _internal_set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool is_valid = 2;
  bool has_is_valid() const;
  private:
  bool _internal_has_is_valid() const;
  public:
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogSendRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg > log_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trxid_;
  bool is_valid_;
  friend struct ::TableStruct_trx_5flog_2eproto;
};
// -------------------------------------------------------------------

class LogSendResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogSendResponse) */ {
 public:
  inline LogSendResponse() : LogSendResponse(nullptr) {}
  virtual ~LogSendResponse();

  LogSendResponse(const LogSendResponse& from);
  LogSendResponse(LogSendResponse&& from) noexcept
    : LogSendResponse() {
    *this = ::std::move(from);
  }

  inline LogSendResponse& operator=(const LogSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogSendResponse& operator=(LogSendResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogSendResponse& default_instance();

  static inline const LogSendResponse* internal_default_instance() {
    return reinterpret_cast<const LogSendResponse*>(
               &_LogSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogSendResponse& a, LogSendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogSendResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogSendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogSendResponse* New() const final {
    return CreateMaybeMessage<LogSendResponse>(nullptr);
  }

  LogSendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogSendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogSendResponse& from);
  void MergeFrom(const LogSendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMLP_BRPC.LogSendResponse";
  }
  protected:
  explicit LogSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trx_5flog_2eproto);
    return ::descriptor_table_trx_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendReplyFieldNumber = 1,
  };
  // required sint32 send_reply = 1;
  bool has_send_reply() const;
  private:
  bool _internal_has_send_reply() const;
  public:
  void clear_send_reply();
  ::PROTOBUF_NAMESPACE_ID::int32 send_reply() const;
  void set_send_reply(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_send_reply() const;
  void _internal_set_send_reply(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogSendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_reply_;
  friend struct ::TableStruct_trx_5flog_2eproto;
};
// -------------------------------------------------------------------

class LogRequireRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogRequireRequest) */ {
 public:
  inline LogRequireRequest() : LogRequireRequest(nullptr) {}
  virtual ~LogRequireRequest();

  LogRequireRequest(const LogRequireRequest& from);
  LogRequireRequest(LogRequireRequest&& from) noexcept
    : LogRequireRequest() {
    *this = ::std::move(from);
  }

  inline LogRequireRequest& operator=(const LogRequireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequireRequest& operator=(LogRequireRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRequireRequest& default_instance();

  static inline const LogRequireRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequireRequest*>(
               &_LogRequireRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogRequireRequest& a, LogRequireRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequireRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequireRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRequireRequest* New() const final {
    return CreateMaybeMessage<LogRequireRequest>(nullptr);
  }

  LogRequireRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRequireRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRequireRequest& from);
  void MergeFrom(const LogRequireRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequireRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMLP_BRPC.LogRequireRequest";
  }
  protected:
  explicit LogRequireRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trx_5flog_2eproto);
    return ::descriptor_table_trx_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrxIDFieldNumber = 1,
  };
  // required uint64 trxID = 1;
  bool has_trxid() const;
  private:
  bool _internal_has_trxid() const;
  public:
  void clear_trxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 trxid() const;
  void set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trxid() const;
  void _internal_set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogRequireRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trxid_;
  friend struct ::TableStruct_trx_5flog_2eproto;
};
// -------------------------------------------------------------------

class LogRequireResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MMLP_BRPC.LogRequireResponse) */ {
 public:
  inline LogRequireResponse() : LogRequireResponse(nullptr) {}
  virtual ~LogRequireResponse();

  LogRequireResponse(const LogRequireResponse& from);
  LogRequireResponse(LogRequireResponse&& from) noexcept
    : LogRequireResponse() {
    *this = ::std::move(from);
  }

  inline LogRequireResponse& operator=(const LogRequireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequireResponse& operator=(LogRequireResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRequireResponse& default_instance();

  static inline const LogRequireResponse* internal_default_instance() {
    return reinterpret_cast<const LogRequireResponse*>(
               &_LogRequireResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogRequireResponse& a, LogRequireResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequireResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequireResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRequireResponse* New() const final {
    return CreateMaybeMessage<LogRequireResponse>(nullptr);
  }

  LogRequireResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRequireResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRequireResponse& from);
  void MergeFrom(const LogRequireResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequireResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MMLP_BRPC.LogRequireResponse";
  }
  protected:
  explicit LogRequireResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trx_5flog_2eproto);
    return ::descriptor_table_trx_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogMsgFieldNumber = 3,
    kRequireReplyFieldNumber = 1,
    kIsValidFieldNumber = 2,
    kTrxIDFieldNumber = 4,
  };
  // repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
  int log_msg_size() const;
  private:
  int _internal_log_msg_size() const;
  public:
  void clear_log_msg();
  ::MMLP_BRPC::TrxLogMsg* mutable_log_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
      mutable_log_msg();
  private:
  const ::MMLP_BRPC::TrxLogMsg& _internal_log_msg(int index) const;
  ::MMLP_BRPC::TrxLogMsg* _internal_add_log_msg();
  public:
  const ::MMLP_BRPC::TrxLogMsg& log_msg(int index) const;
  ::MMLP_BRPC::TrxLogMsg* add_log_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
      log_msg() const;

  // required sint32 require_reply = 1;
  bool has_require_reply() const;
  private:
  bool _internal_has_require_reply() const;
  public:
  void clear_require_reply();
  ::PROTOBUF_NAMESPACE_ID::int32 require_reply() const;
  void set_require_reply(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_require_reply() const;
  void _internal_set_require_reply(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool is_valid = 2;
  bool has_is_valid() const;
  private:
  bool _internal_has_is_valid() const;
  public:
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // optional uint64 trxID = 4;
  bool has_trxid() const;
  private:
  bool _internal_has_trxid() const;
  public:
  void clear_trxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 trxid() const;
  void set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trxid() const;
  void _internal_set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MMLP_BRPC.LogRequireResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg > log_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 require_reply_;
  bool is_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trxid_;
  friend struct ::TableStruct_trx_5flog_2eproto;
};
// ===================================================================

class TrxLogService_Stub;

class TrxLogService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TrxLogService() {};
 public:
  virtual ~TrxLogService();

  typedef TrxLogService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void sendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MMLP_BRPC::LogSendRequest* request,
                       ::MMLP_BRPC::LogSendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void requireLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MMLP_BRPC::LogRequireRequest* request,
                       ::MMLP_BRPC::LogRequireResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TrxLogService);
};

class TrxLogService_Stub : public TrxLogService {
 public:
  TrxLogService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TrxLogService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TrxLogService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TrxLogService ------------------------------------------

  void sendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MMLP_BRPC::LogSendRequest* request,
                       ::MMLP_BRPC::LogSendResponse* response,
                       ::google::protobuf::Closure* done);
  void requireLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::MMLP_BRPC::LogRequireRequest* request,
                       ::MMLP_BRPC::LogRequireResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TrxLogService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BenchLogMsg

// required uint32 page_no = 1;
inline bool BenchLogMsg::_internal_has_page_no() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BenchLogMsg::has_page_no() const {
  return _internal_has_page_no();
}
inline void BenchLogMsg::clear_page_no() {
  page_no_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BenchLogMsg::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BenchLogMsg::page_no() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.BenchLogMsg.page_no)
  return _internal_page_no();
}
inline void BenchLogMsg::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  page_no_ = value;
}
inline void BenchLogMsg::set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.BenchLogMsg.page_no)
}

// required uint32 row_no = 2;
inline bool BenchLogMsg::_internal_has_row_no() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BenchLogMsg::has_row_no() const {
  return _internal_has_row_no();
}
inline void BenchLogMsg::clear_row_no() {
  row_no_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BenchLogMsg::_internal_row_no() const {
  return row_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BenchLogMsg::row_no() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.BenchLogMsg.row_no)
  return _internal_row_no();
}
inline void BenchLogMsg::_internal_set_row_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  row_no_ = value;
}
inline void BenchLogMsg::set_row_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_no(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.BenchLogMsg.row_no)
}

// -------------------------------------------------------------------

// TrxLogMsg

// required sint32 type = 1;
inline bool TrxLogMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrxLogMsg::has_type() const {
  return _internal_has_type();
}
inline void TrxLogMsg::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrxLogMsg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrxLogMsg::type() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.type)
  return _internal_type();
}
inline void TrxLogMsg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void TrxLogMsg::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.type)
}

// required uint32 space_id = 2;
inline bool TrxLogMsg::_internal_has_space_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrxLogMsg::has_space_id() const {
  return _internal_has_space_id();
}
inline void TrxLogMsg::clear_space_id() {
  space_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxLogMsg::_internal_space_id() const {
  return space_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxLogMsg::space_id() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.space_id)
  return _internal_space_id();
}
inline void TrxLogMsg::_internal_set_space_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  space_id_ = value;
}
inline void TrxLogMsg::set_space_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_space_id(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.space_id)
}

// required uint32 page_no = 3;
inline bool TrxLogMsg::_internal_has_page_no() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrxLogMsg::has_page_no() const {
  return _internal_has_page_no();
}
inline void TrxLogMsg::clear_page_no() {
  page_no_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxLogMsg::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxLogMsg::page_no() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.page_no)
  return _internal_page_no();
}
inline void TrxLogMsg::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  page_no_ = value;
}
inline void TrxLogMsg::set_page_no(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.page_no)
}

// required uint32 offset = 4;
inline bool TrxLogMsg::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrxLogMsg::has_offset() const {
  return _internal_has_offset();
}
inline void TrxLogMsg::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxLogMsg::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxLogMsg::offset() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.offset)
  return _internal_offset();
}
inline void TrxLogMsg::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  offset_ = value;
}
inline void TrxLogMsg::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.offset)
}

// required bytes rec = 5;
inline bool TrxLogMsg::_internal_has_rec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrxLogMsg::has_rec() const {
  return _internal_has_rec();
}
inline void TrxLogMsg::clear_rec() {
  rec_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrxLogMsg::rec() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.rec)
  return _internal_rec();
}
inline void TrxLogMsg::set_rec(const std::string& value) {
  _internal_set_rec(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.TrxLogMsg.rec)
}
inline std::string* TrxLogMsg::mutable_rec() {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.TrxLogMsg.rec)
  return _internal_mutable_rec();
}
inline const std::string& TrxLogMsg::_internal_rec() const {
  return rec_.Get();
}
inline void TrxLogMsg::_internal_set_rec(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrxLogMsg::set_rec(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rec_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MMLP_BRPC.TrxLogMsg.rec)
}
inline void TrxLogMsg::set_rec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MMLP_BRPC.TrxLogMsg.rec)
}
inline void TrxLogMsg::set_rec(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MMLP_BRPC.TrxLogMsg.rec)
}
inline std::string* TrxLogMsg::_internal_mutable_rec() {
  _has_bits_[0] |= 0x00000001u;
  return rec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrxLogMsg::release_rec() {
  // @@protoc_insertion_point(field_release:MMLP_BRPC.TrxLogMsg.rec)
  if (!_internal_has_rec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rec_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrxLogMsg::set_allocated_rec(std::string* rec) {
  if (rec != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rec,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MMLP_BRPC.TrxLogMsg.rec)
}

// repeated .MMLP_BRPC.BenchLogMsg benchmsg = 6;
inline int TrxLogMsg::_internal_benchmsg_size() const {
  return benchmsg_.size();
}
inline int TrxLogMsg::benchmsg_size() const {
  return _internal_benchmsg_size();
}
inline void TrxLogMsg::clear_benchmsg() {
  benchmsg_.Clear();
}
inline ::MMLP_BRPC::BenchLogMsg* TrxLogMsg::mutable_benchmsg(int index) {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.TrxLogMsg.benchmsg)
  return benchmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >*
TrxLogMsg::mutable_benchmsg() {
  // @@protoc_insertion_point(field_mutable_list:MMLP_BRPC.TrxLogMsg.benchmsg)
  return &benchmsg_;
}
inline const ::MMLP_BRPC::BenchLogMsg& TrxLogMsg::_internal_benchmsg(int index) const {
  return benchmsg_.Get(index);
}
inline const ::MMLP_BRPC::BenchLogMsg& TrxLogMsg::benchmsg(int index) const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.TrxLogMsg.benchmsg)
  return _internal_benchmsg(index);
}
inline ::MMLP_BRPC::BenchLogMsg* TrxLogMsg::_internal_add_benchmsg() {
  return benchmsg_.Add();
}
inline ::MMLP_BRPC::BenchLogMsg* TrxLogMsg::add_benchmsg() {
  // @@protoc_insertion_point(field_add:MMLP_BRPC.TrxLogMsg.benchmsg)
  return _internal_add_benchmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::BenchLogMsg >&
TrxLogMsg::benchmsg() const {
  // @@protoc_insertion_point(field_list:MMLP_BRPC.TrxLogMsg.benchmsg)
  return benchmsg_;
}

// -------------------------------------------------------------------

// LogSendRequest

// required uint64 trxID = 1;
inline bool LogSendRequest::_internal_has_trxid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogSendRequest::has_trxid() const {
  return _internal_has_trxid();
}
inline void LogSendRequest::clear_trxid() {
  trxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogSendRequest::_internal_trxid() const {
  return trxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogSendRequest::trxid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendRequest.trxID)
  return _internal_trxid();
}
inline void LogSendRequest::_internal_set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  trxid_ = value;
}
inline void LogSendRequest::set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trxid(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogSendRequest.trxID)
}

// required bool is_valid = 2;
inline bool LogSendRequest::_internal_has_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogSendRequest::has_is_valid() const {
  return _internal_has_is_valid();
}
inline void LogSendRequest::clear_is_valid() {
  is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LogSendRequest::_internal_is_valid() const {
  return is_valid_;
}
inline bool LogSendRequest::is_valid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendRequest.is_valid)
  return _internal_is_valid();
}
inline void LogSendRequest::_internal_set_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_valid_ = value;
}
inline void LogSendRequest::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogSendRequest.is_valid)
}

// repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
inline int LogSendRequest::_internal_log_msg_size() const {
  return log_msg_.size();
}
inline int LogSendRequest::log_msg_size() const {
  return _internal_log_msg_size();
}
inline void LogSendRequest::clear_log_msg() {
  log_msg_.Clear();
}
inline ::MMLP_BRPC::TrxLogMsg* LogSendRequest::mutable_log_msg(int index) {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.LogSendRequest.log_msg)
  return log_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
LogSendRequest::mutable_log_msg() {
  // @@protoc_insertion_point(field_mutable_list:MMLP_BRPC.LogSendRequest.log_msg)
  return &log_msg_;
}
inline const ::MMLP_BRPC::TrxLogMsg& LogSendRequest::_internal_log_msg(int index) const {
  return log_msg_.Get(index);
}
inline const ::MMLP_BRPC::TrxLogMsg& LogSendRequest::log_msg(int index) const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendRequest.log_msg)
  return _internal_log_msg(index);
}
inline ::MMLP_BRPC::TrxLogMsg* LogSendRequest::_internal_add_log_msg() {
  return log_msg_.Add();
}
inline ::MMLP_BRPC::TrxLogMsg* LogSendRequest::add_log_msg() {
  // @@protoc_insertion_point(field_add:MMLP_BRPC.LogSendRequest.log_msg)
  return _internal_add_log_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
LogSendRequest::log_msg() const {
  // @@protoc_insertion_point(field_list:MMLP_BRPC.LogSendRequest.log_msg)
  return log_msg_;
}

// -------------------------------------------------------------------

// LogSendResponse

// required sint32 send_reply = 1;
inline bool LogSendResponse::_internal_has_send_reply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogSendResponse::has_send_reply() const {
  return _internal_has_send_reply();
}
inline void LogSendResponse::clear_send_reply() {
  send_reply_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogSendResponse::_internal_send_reply() const {
  return send_reply_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogSendResponse::send_reply() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogSendResponse.send_reply)
  return _internal_send_reply();
}
inline void LogSendResponse::_internal_set_send_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  send_reply_ = value;
}
inline void LogSendResponse::set_send_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_send_reply(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogSendResponse.send_reply)
}

// -------------------------------------------------------------------

// LogRequireRequest

// required uint64 trxID = 1;
inline bool LogRequireRequest::_internal_has_trxid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRequireRequest::has_trxid() const {
  return _internal_has_trxid();
}
inline void LogRequireRequest::clear_trxid() {
  trxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRequireRequest::_internal_trxid() const {
  return trxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRequireRequest::trxid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireRequest.trxID)
  return _internal_trxid();
}
inline void LogRequireRequest::_internal_set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  trxid_ = value;
}
inline void LogRequireRequest::set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trxid(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireRequest.trxID)
}

// -------------------------------------------------------------------

// LogRequireResponse

// required sint32 require_reply = 1;
inline bool LogRequireResponse::_internal_has_require_reply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRequireResponse::has_require_reply() const {
  return _internal_has_require_reply();
}
inline void LogRequireResponse::clear_require_reply() {
  require_reply_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRequireResponse::_internal_require_reply() const {
  return require_reply_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRequireResponse::require_reply() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.require_reply)
  return _internal_require_reply();
}
inline void LogRequireResponse::_internal_set_require_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  require_reply_ = value;
}
inline void LogRequireResponse::set_require_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_require_reply(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireResponse.require_reply)
}

// required bool is_valid = 2;
inline bool LogRequireResponse::_internal_has_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogRequireResponse::has_is_valid() const {
  return _internal_has_is_valid();
}
inline void LogRequireResponse::clear_is_valid() {
  is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LogRequireResponse::_internal_is_valid() const {
  return is_valid_;
}
inline bool LogRequireResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.is_valid)
  return _internal_is_valid();
}
inline void LogRequireResponse::_internal_set_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_valid_ = value;
}
inline void LogRequireResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireResponse.is_valid)
}

// repeated .MMLP_BRPC.TrxLogMsg log_msg = 3;
inline int LogRequireResponse::_internal_log_msg_size() const {
  return log_msg_.size();
}
inline int LogRequireResponse::log_msg_size() const {
  return _internal_log_msg_size();
}
inline void LogRequireResponse::clear_log_msg() {
  log_msg_.Clear();
}
inline ::MMLP_BRPC::TrxLogMsg* LogRequireResponse::mutable_log_msg(int index) {
  // @@protoc_insertion_point(field_mutable:MMLP_BRPC.LogRequireResponse.log_msg)
  return log_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >*
LogRequireResponse::mutable_log_msg() {
  // @@protoc_insertion_point(field_mutable_list:MMLP_BRPC.LogRequireResponse.log_msg)
  return &log_msg_;
}
inline const ::MMLP_BRPC::TrxLogMsg& LogRequireResponse::_internal_log_msg(int index) const {
  return log_msg_.Get(index);
}
inline const ::MMLP_BRPC::TrxLogMsg& LogRequireResponse::log_msg(int index) const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.log_msg)
  return _internal_log_msg(index);
}
inline ::MMLP_BRPC::TrxLogMsg* LogRequireResponse::_internal_add_log_msg() {
  return log_msg_.Add();
}
inline ::MMLP_BRPC::TrxLogMsg* LogRequireResponse::add_log_msg() {
  // @@protoc_insertion_point(field_add:MMLP_BRPC.LogRequireResponse.log_msg)
  return _internal_add_log_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MMLP_BRPC::TrxLogMsg >&
LogRequireResponse::log_msg() const {
  // @@protoc_insertion_point(field_list:MMLP_BRPC.LogRequireResponse.log_msg)
  return log_msg_;
}

// optional uint64 trxID = 4;
inline bool LogRequireResponse::_internal_has_trxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogRequireResponse::has_trxid() const {
  return _internal_has_trxid();
}
inline void LogRequireResponse::clear_trxid() {
  trxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRequireResponse::_internal_trxid() const {
  return trxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRequireResponse::trxid() const {
  // @@protoc_insertion_point(field_get:MMLP_BRPC.LogRequireResponse.trxID)
  return _internal_trxid();
}
inline void LogRequireResponse::_internal_set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  trxid_ = value;
}
inline void LogRequireResponse::set_trxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trxid(value);
  // @@protoc_insertion_point(field_set:MMLP_BRPC.LogRequireResponse.trxID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MMLP_BRPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trx_5flog_2eproto
